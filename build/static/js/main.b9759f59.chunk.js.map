{"version":3,"sources":["Components/Note.js","services/notes.js","Components/Notification.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","baseUrl","axios","get","then","response","data","newObject","post","id","put","Notification","message","Footer","style","color","fontStyle","fontSize","padding","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","console","log","length","notesToShow","filter","map","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","target","noteObject","date","Date","toISOString","Math","random","concat","value","onChange","type","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b9759f59.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n  const label = note.important ? \"make not important\" : \"make important\";\r\n  return (\r\n    <li className=\"note\">\r\n      {note.content} <button onClick={toggleImportance}>{label}</button>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default Note;\r\n","import axios from \"axios\";\r\nconst baseUrl = \"/api/notes\";\r\n\r\n// const getAll = () => {\r\n//   const request = axios.get(baseUrl);\r\n//   const nonExisting = {\r\n//     id: 10000,\r\n//     content: \"This note is not saved to server\",\r\n//     date: \"2019-05-30T17:30:31.098Z\",\r\n//     important: true,\r\n//   };\r\n//   return request.then((response) => response.data.concat(nonExisting));\r\n// };\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\nconst create = (newObject) => {\r\n  const request = axios.post(baseUrl, newObject);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\nexport default { getAll, create, update };\r\n","import React from \"react\";\r\n\r\nconst Notification = ({ message }) => {\r\n  if (message === null) {\r\n    return null;\r\n  } else {\r\n    return <div className=\"error\">{message}</div>;\r\n  }\r\n};\r\n\r\nexport default Notification;\r\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Note from \"./Components/Note\";\nimport noteService from \"./services/notes\";\nimport \"./index.css\";\nimport Notification from \"./Components/Notification\";\n\nconst Footer = () => {\n  const footerStyle = {\n    color: \"green\",\n    fontStyle: \"italic\",\n    fontSize: 16,\n    padding: 10,\n  };\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>Note App, Department of Computer Science, University of Helsinki 2021</em>\n    </div>\n  );\n};\n\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState(\"a new note...\");\n  const [showAll, setShowAll] = useState(true);\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  useEffect(() => {\n    noteService.getAll().then((initialNotes) => {\n      setNotes(initialNotes);\n    });\n  }, []);\n  // useEffect(() => {\n  //   axios.get(\"https://still-everglades-37011.herokuapp.com/api/notes\").then((res) => {\n  //     setNotes(res.data);\n  //   });\n  // }, []);\n  console.log(\"render\", notes.length, \"notes\");\n\n  const addNote = (event) => {\n    event.preventDefault();\n    console.log(\"button clicked\", event.target);\n\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5,\n    };\n\n    noteService.create(noteObject).then((returnedNote) => {\n      setNotes(notes.concat(returnedNote));\n      setNewNote(\"\");\n    });\n  };\n\n  const handleNoteChange = (event) => {\n    console.log(`event.target.value`, event.target.value);\n    setNewNote(event.target.value);\n  };\n\n  const notesToShow = showAll ? notes : notes.filter((note) => note.important);\n  const toggleImportanceOf = (id) => {\n    const note = notes.find((n) => n.id === id);\n    const changedNote = { ...note, important: !note.important };\n\n    noteService\n      .update(id, changedNote)\n      .then((returnedNote) => {\n        setNotes(notes.map((note) => (note.id !== id ? note : returnedNote)));\n      })\n      .catch((error) => {\n        setErrorMessage(`Note ${note.content} was already removed from the server`);\n        setTimeout(() => {\n          setErrorMessage(null);\n        }, 5000);\n        setNotes(notes.filter((n) => n.id !== id));\n      });\n  };\n  return (\n    <div>\n      <h1>Notes Application</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}> Show {showAll ? \"important\" : \"all\"} </button>\n      </div>\n      <ul>\n        {notesToShow.map((note) => (\n          <Note key={note.id} note={note} toggleImportance={() => toggleImportanceOf(note.id)} />\n        ))}\n      </ul>\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNoteChange} />\n        <button type=\"submit\"> Save</button>\n      </form>\n      <Footer />\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nimport axios from \"axios\";\n\naxios.get(\"https://still-everglades-37011.herokuapp.com/api/notes\").then((response) => {\n  const notes = response.data;\n  ReactDOM.render(<App />, document.getElementById(\"root\"));\n});\n// import React from 'react';\n// import ReactDOM from 'react-dom';\n// import './index.css';\n// import App from './App';\n// import reportWebVitals from './reportWebVitals';\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n// // If you want to start measuring performance in your app, pass a function\n// // to log results (for example: reportWebVitals(console.log))\n// // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}